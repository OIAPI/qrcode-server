name: QRCode-Server

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]  # 匹配语义化版本 Tag（如 v1.0.0）
  pull_request:
    branches: [ main ]

jobs:
  code-check:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: 安装依赖
        run: go mod init qrcode-server && go mod tidy && go mod verify

      - name: 代码 lint 检查
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m --enable=goimports,revive

      - name: 编译验证
        run: go build -o /dev/null main.go


  multi-platform-build:
    needs: code-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 某个平台失败不影响其他
      matrix:
        # 使用对象数组的方式定义平台配置，确保各维度正确对应
        platform: 
          - { goos: linux, goarch: amd64, output: "qrcode-server-linux-amd64", zip: "linux-amd64.zip" }
          - { goos: linux, goarch: arm64, output: "qrcode-server-linux-arm64", zip: "linux-arm64.zip" }
          - { goos: windows, goarch: amd64, output: "qrcode-server-windows-amd64.exe", zip: "windows-amd64.zip" }
          - { goos: darwin, goarch: amd64, output: "qrcode-server-darwin-amd64", zip: "darwin-amd64.zip" }
          - { goos: darwin, goarch: arm64, output: "qrcode-server-darwin-arm64", zip: "darwin-arm64.zip" }
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: 安装依赖
        run: go mod init qrcode-server && go mod tidy

      - name: 生成版本信息
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="main-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 编译 ${{ matrix.platform.goos }}/${{ matrix.platform.goarch }} 平台
        run: |
          # 使用 matrix 中的平台对象变量
          GOOS=${{ matrix.platform.goos }} \
          GOARCH=${{ matrix.platform.goarch }} \
          go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" \
          -o "bin/${{ matrix.platform.output }}" main.go
          # 压缩产物
          cd bin && zip ${{ matrix.platform.zip }} ${{ matrix.platform.output }}

      - name: 暂存编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.zip }}
          path: bin/${{ matrix.platform.zip }}
          retention-days: 14
          if-no-files-found: error


  release:
    needs: multi-platform-build
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有编译产物
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: 整理产物
        run: |
          mkdir -p final-release
          find release-artifacts -type f -name "*.zip" -exec mv {} final-release/ \;

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          body_path: README.md
          files: final-release/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
